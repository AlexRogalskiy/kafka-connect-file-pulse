/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.streamthoughts.kafka.connect.filepulse.config;

import io.streamthoughts.kafka.connect.filepulse.filter.config.CommonFilterConfig;
import org.apache.kafka.common.config.ConfigDef;
import org.apache.kafka.common.config.ConfigException;
import org.apache.kafka.connect.data.Schema;
import org.apache.kafka.connect.data.SchemaBuilder;

import java.util.Arrays;
import java.util.Map;
import java.util.stream.Collectors;

public class DelimitedRowFilterConfig extends CommonFilterConfig {

    public static final String READER_FIELD_SEPARATOR_CONFIG              = "separator";
    public static final String READER_FIELD_SEPARATOR_DEFAULT             = ";";
    public static final String READER_FIELD_SEPARATOR_DOC                 = "The character used as a delimiter/separator between each value (default: ';').";

    public static final String READER_FIELD_TRIM_COLUMN_CONFIG            = "trimColumn";
    public static final String READER_FIELD_TRIM_COLUMN_DOC               = "Remove the leading and trailing whitespaces from all columns.";
    public static final boolean READER_FIELD_TRIM_COLUMN_DEFAULT          = false;

    public static final String READER_EXTRACT_COLUMN_NAME_CONFIG          = "extractColumnName";
    public static final String READER_EXTRACT_COLUMN_NAME_DOC             = "Define the field from which the schema should be detected (all columns will be of type 'withMessage')";

    public static final String READER_AUTO_GENERATE_COLUMN_NAME_CONFIG    = "autoGenerateColumnNames";
    public static final String READER_AUTO_GENERATE_COLUMN_NAME_DOC       = "Define whether column names should autogenerated or not (column names will of the form 'column1, column2')";
    public static final boolean READER_AUTO_GENERATE_COLUMN_NAME_DEFAULT  = true;

    public static final String READER_FIELD_COLUMNS_CONFIG                = "columns";
    public static final String READER_FIELD_COLUMNS_DOC                   = "Define the list of column names in order they appear in each row. columns must be in the form of TYPE:NAME";

    /**
     * Creates a new {@link DelimitedRowFilterConfig} instance.
     *
     * @param originals the configuration.
     */
    public DelimitedRowFilterConfig(final Map<?, ?> originals) {
        super(configDef(), originals);
    }

    public String delimiter() {
        return getString(READER_FIELD_SEPARATOR_CONFIG);
    }

    public String extractColumnName() { return getString(READER_EXTRACT_COLUMN_NAME_CONFIG); }

    public boolean isTrimColumn() {
        return getBoolean(READER_FIELD_TRIM_COLUMN_CONFIG);
    }

    public boolean isAutoGenerateColumnNames() {
        return getBoolean(READER_AUTO_GENERATE_COLUMN_NAME_CONFIG);
    }

    public SchemaBuilder schema() {
        final String columns = getString(READER_FIELD_COLUMNS_CONFIG);
        if (columns == null) return null;

        SchemaBuilder builder = SchemaBuilder.struct();
        for (String column : columns.split(delimiter())) {
            if (!column.contains(":")) {
                throw new ConfigException(
                    "Invalid schema field definition, expecting input as NAME:TYPE, but got '" + column + "'");
            }
            String[] typeAndName = column.split(":");
            final String fieldName = typeAndName[0];
            final String fieldType = typeAndName[1];
            try {
                Schema schemaType =  new SchemaBuilder(Schema.Type.valueOf(fieldType.toUpperCase())).optional().defaultValue(null);
                builder = builder.field(fieldName, schemaType);
            } catch (IllegalArgumentException e) {
                final String types = Arrays
                    .stream(Schema.Type.values())
                    .map(Enum::name)
                    .collect(Collectors.joining(", ", "[", "]"));
                throw new ConfigException(
                    "Invalid schema field definition, unknown type '" + fieldType + "', expecting one of : " + types);
            }
        }

        return builder;
    }

    public static ConfigDef configDef() {
        return CommonFilterConfig.configDef()
                .define(READER_FIELD_SEPARATOR_CONFIG, ConfigDef.Type.STRING, READER_FIELD_SEPARATOR_DEFAULT,
                        ConfigDef.Importance.HIGH, READER_FIELD_SEPARATOR_DOC)

                .define(READER_EXTRACT_COLUMN_NAME_CONFIG, ConfigDef.Type.STRING, null,
                        ConfigDef.Importance.HIGH, READER_EXTRACT_COLUMN_NAME_DOC)

                .define(READER_FIELD_COLUMNS_CONFIG, ConfigDef.Type.STRING, null,
                        ConfigDef.Importance.HIGH, READER_FIELD_COLUMNS_DOC)

                .define(READER_AUTO_GENERATE_COLUMN_NAME_CONFIG, ConfigDef.Type.BOOLEAN, READER_AUTO_GENERATE_COLUMN_NAME_DEFAULT,
                        ConfigDef.Importance.HIGH, READER_AUTO_GENERATE_COLUMN_NAME_DOC)

                .define(READER_FIELD_TRIM_COLUMN_CONFIG, ConfigDef.Type.BOOLEAN, READER_FIELD_TRIM_COLUMN_DEFAULT,
                        ConfigDef.Importance.LOW, READER_FIELD_TRIM_COLUMN_DOC);
    }
}
